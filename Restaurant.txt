import pickle


class Location:
    def _init_(self, city, locality, arc):
        self.city = city
        self.locality = locality
        self.arc = arc

class CriticRating:
    def _init_(self, amb, food, hyg, mng):
        self.amb = min(amb, 5)
        self.food = min(food, 5)
        self.hyg = min(hyg, 5)
        self.mng = min(mng, 5)

class Restaurant:
    def _init_(self, rname, city, locality, arc, tinno, cuisine, epp, amb, food, hyg, mng):
        self.rname = rname
        self.location = Location(city, locality, arc)
        self.cuisine = cuisine
        self.tinno = tinno
        self.epp = epp
        self.rating = CriticRating(amb, food, hyg, mng)

    def display(self):
        print(f"\nTin no.        : {self.tinno}")
        print(f"Restaurant name: {self.rname}")
        print("\nLOCATION")
        print(f"City              : {self.location.city}")
        print(f"Locality          : {self.location.locality}")
        print(f"Area code         : {self.location.arc}")
        print(f"Expense per person: {self.epp}")
        print(f"Cuisine           : {self.cuisine}")
        print("\nCRITICS RATING")
        print(f"Ambience             : {self.rating.amb}/5")
        print(f"Quality of food      : {self.rating.food}/5")
        print(f"Hygiene              : {self.rating.hyg}/5")
        print(f"Restaurant management: {self.rating.mng}/5\n")

    def update_rating(self, amb_delta=0, food_delta=0, hyg_delta=0, mng_delta=0):
        self.rating.amb = min(5, max(0, self.rating.amb + amb_delta))
        self.rating.food = min(5, max(0, self.rating.food + food_delta))
        self.rating.hyg = min(5, max(0, self.rating.hyg + hyg_delta))
        self.rating.mng = min(5, max(0, self.rating.mng + mng_delta))

    def update_epp(self, new_epp):
        self.epp = new_epp

def save_restaurants(restaurants, filename):
    with open(filename, 'wb') as file:
        pickle.dump(restaurants, file)

def load_restaurants(filename):
    try:
        with open(filename, 'rb') as file:
            return pickle.load(file)
    except FileNotFoundError:
        return []

def search_restaurant_by_name(restaurants, name):
    for restaurant in restaurants:
        if restaurant.rname.lower() == name.lower():
            return restaurant
    return None

def search_restaurants_by_locality(restaurants, locality):
    return [r for r in restaurants if r.location.locality.lower() == locality.lower()]

def search_restaurants_by_cuisine(restaurants, cuisine):
    return [r for r in restaurants if r.cuisine.lower() == cuisine.lower()]

def search_restaurants_by_epp_range(restaurants, min_epp, max_epp):
    return [r for r in restaurants if min_epp <= r.epp <= max_epp]

def add_restaurant(restaurants):
    rname = input("Enter the restaurant name: ")
    city = input("Enter the city: ")
    locality = input("Enter the locality: ")
    arc = int(input("Enter the area code: "))
    tinno = int(input("Enter the TIN number: "))
    cuisine = input("Enter the cuisine: ")
    epp = int(input("Enter the expense per person: "))
    amb = int(input("Enter ambience rating (0-5): "))
    food = int(input("Enter food quality rating (0-5): "))
    hyg = int(input("Enter hygiene rating (0-5): "))
    mng = int(input("Enter management rating (0-5): "))
    
    new_restaurant = Restaurant(rname, city, locality, arc, tinno, cuisine, epp, amb, food, hyg, mng)
    restaurants.append(new_restaurant)
    print("Restaurant added successfully!")

def delete_restaurant(restaurants, name):
    restaurant = search_restaurant_by_name(restaurants, name)
    if restaurant:
        restaurants.remove(restaurant)
        print(f"Restaurant {name} deleted successfully.")
    else:
        print(f"Restaurant {name} not found.")

def main():
    filename = 'restaurants.dat'
    restaurants = load_restaurants(filename)
    
    while True:
        print("\nRestaurant Management System")
        print("1. Add a new restaurant")
        print("2. Display all restaurants")
        print("3. Search restaurant by name")
        print("4. Search restaurants by locality")
        print("5. Search restaurants by cuisine")
        print("6. Search restaurants by expense range")
        print("7. Update restaurant rating")
        print("8. Update restaurant expense per person")
        print("9. Delete a restaurant")
        print("0. Exit")
        
        choice = input("Enter your choice: ")
        
        if choice == '1':
            add_restaurant(restaurants)
            save_restaurants(restaurants, filename)
        elif choice == '2':
            for restaurant in restaurants:
                restaurant.display()
        elif choice == '3':
            name = input("Enter the restaurant name: ")
            display_restaurant_info(search_restaurant_by_name(restaurants, name))
        elif choice == '4':
            locality = input("Enter the locality: ")
            results = search_restaurants_by_locality(restaurants, locality)
            if results:
                for r in results:
                    r.display()
            else:
                print("No restaurants found in this locality.")
        elif choice == '5':
            cuisine = input("Enter the cuisine: ")
            results = search_restaurants_by_cuisine(restaurants, cuisine)
            if results:
                for r in results:
                    r.display()
            else:
                print("No restaurants found with this cuisine.")
        elif choice == '6':
            min_epp = int(input("Enter minimum expense per person: "))
            max_epp = int(input("Enter maximum expense per person: "))
            results = search_restaurants_by_epp_range(restaurants, min_epp, max_epp)
            if results:
                for r in results:
                    r.display()
            else:
                print("No restaurants found in this expense range.")
        elif choice == '7':
            name = input("Enter the restaurant name: ")
            restaurant = search_restaurant_by_name(restaurants, name)
            if restaurant:
                amb_delta = int(input("Enter ambience rating change (-5 to 5): "))
                food_delta = int(input("Enter food rating change (-5 to 5): "))
                hyg_delta = int(input("Enter hygiene rating change (-5 to 5): "))
                mng_delta = int(input("Enter management rating change (-5 to 5): "))
                restaurant.update_rating(amb_delta, food_delta, hyg_delta, mng_delta)
                save_restaurants(restaurants, filename)
                print("Ratings updated successfully!")
            else:
                print("Restaurant not found.")
        elif choice == '8':
            name = input("Enter the restaurant name: ")
            restaurant = search_restaurant_by_name(restaurants, name)
            if restaurant:
                new_epp = int(input("Enter the new expense per person: "))
                restaurant.update_epp(new_epp)
                save_restaurants(restaurants, filename)
                print("Expense per person updated successfully!")
            else:
                print("Restaurant not found.")
        elif choice == '9':
            name = input("Enter the restaurant name to delete: ")
            delete_restaurant(restaurants, name)
            save_restaurants(restaurants, filename)
        elif choice == '0':
            print("Exiting program...")
            break
        else:
            print("Invalid choice. Please try again.")

if _name_ == '_main_':
    main()